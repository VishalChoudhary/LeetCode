Explanation of the Code:
Min-Heap with Priority Queue:

We use priority_queue<int, vector<int>, greater<int>> pq to maintain a min-heap. By using greater<int>, the smallest element stays at the top of the heap.
Result Vector:

vector<int> result is used to store the extracted minimums (i.e., the results of the 1 queries).
Processing Queries:

Insertion (when q[i][0] == 0): The second element of the query q[i][1] is inserted into the priority queue.
Extraction (when q[i][0] == 1): The smallest element (pq.top()) is extracted, added to the result vector, and then removed from the heap (pq.pop()).
Return Result:


n = 5;
q = {{0, 3}, {0, 2}, {1}, {0, 1}, {1}};
Query 1: Insert 3 → Heap = [3]
Query 2: Insert 2 → Heap = [2, 3] (2 is the minimum)
Query 3: Extract minimum → Extract 2 → Heap = [3], Result = [2]
Query 4: Insert 1 → Heap = [1, 3] (1 is the minimum)
Query 5: Extract minimum → Extract 1 → Heap = [3], Result = [2, 1]
The function will return result = [2, 1].
